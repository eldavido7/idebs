generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String           @id @default(uuid()) // Nano ID will be generated in code
  title         String
  description   String
  price         Int? // Naira in full units (e.g., 1500 = ₦1500)
  inventory     Int?
  category      String
  subcategory   String?
  tags          String[]
  barcode       String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  orderItems    OrderItem[]
  quantity      Int              @default(0) // inventory stock
  discounts     Discount[]       @relation("ProductDiscounts")
  imageUrl      String? // URL from Cloudinary
  imagePublicId String? // Cloudinary public_id for management
  variants      ProductVariant[]
}

model ProductVariant {
  id         String      @id @default(uuid())
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  sku        String? // optional per-variant SKU or barcode (nullable)
  name       String? // human label e.g. "M", "L", "Red / XL" — optional
  price      Int? // optional override price for the variant (nullable)
  inventory  Int         @default(0) // inventory per-variant
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  orderItems OrderItem[]
  discounts  Discount[]  @relation("DiscountVariants")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id               String          @id @default(uuid())
  firstName        String? // Make optional for admin checkout
  lastName         String? // Make optional for admin checkout
  email            String? // Make optional for admin checkout
  phone            String? // Make optional for admin checkout
  address          String? // Make optional for admin checkout
  city             String? // Make optional for admin checkout
  state            String? // Make optional for admin checkout
  postalCode       String? // Make optional for admin checkout
  country          String? // Make optional for admin checkout
  cashierId        String? // New field for admin checkout
  cashier          User?           @relation(fields: [cashierId], references: [id])
  status           OrderStatus     @default(PENDING)
  subtotal         Float           @default(0) // Sum of OrderItem.subtotal
  shippingOptionId String? // References ShippingOption
  shippingOption   ShippingOption? @relation(fields: [shippingOptionId], references: [id], name: "OrderToShippingOption")
  shippingCost     Float?          @default(0) // Cost of selected shipping option
  paymentReference String? // Paystack transaction reference
  total            Float           @default(0) // Subtotal + shippingCost - discount
  discountId       String?
  discount         Discount?       @relation(fields: [discountId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  items            OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  quantity  Int
  subtotal  Float
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId String?
}

model Discount {
  id          String           @id @default(cuid())
  code        String           @unique
  description String?
  type        DiscountType
  value       Float
  usageLimit  Int?
  usageCount  Int              @default(0)
  startsAt    DateTime
  endsAt      DateTime?
  isActive    Boolean
  minSubtotal Float? // optional condition
  products    Product[]        @relation("ProductDiscounts") // for product-specific discounts
  orders      Order[] // Orders this discount has been applied to
  conditions  Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  variants    ProductVariant[] @relation("DiscountVariants")
}

enum DiscountType {
  percentage
  fixed_amount
  free_shipping
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(ADMIN)
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]
}

enum UserRole {
  ADMIN
  CASHIER
}

model ShippingOption {
  id           String         @id @default(cuid())
  name         String
  price        Float
  deliveryTime String
  status       ShippingStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]        @relation("OrderToShippingOption")
}

enum ShippingStatus {
  ACTIVE
  CONDITIONAL
}
